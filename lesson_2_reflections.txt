Q: What happens when you initialize a repository? Why do you need to do
it?
A: Initialising of a reposetory is a start point after what each change
inside it will be tracked.

Q: How is the staging area different from the working directory and the
repository? What value do you think it offers?
A: Stagging area is like some reloading point where you can choose the
order you want to make your changes to become live. The files on these
stage are already changed but still not "live". In case you made few
changes, it's better to push these changes one-by-one to check they do
not crash any.

Q: How can you use the staging area to make sure you have one commit 
per logical change?
A: You can check what is added to the staging area and how it differ
from the "live" files to make sure you'll commit only one logical 
change.

Q: What are some situations when branches would be helpful in keeping
your history organized? How would branches help?
A: They would be helpful in case you decide to check some code
optimisation or to add some new feature that doesn't influence
on the main part of programm. Branches could help to separate
the complex developing process into the smaller and more understandable
parts.

Q: How do the diagrams help you visualize the branch structure?
A: It helps to understand the amount of "live" branches, at what stage
they are and how much and what exactly changes were made in master
branch after the creating of each new branch.

Q: What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do?
A: The result of merging two branches is a version of project that 
include all the changes made in those branches.
As I understand for now, each branch is a different direction of the
development process that sometimes before separates from the main
branch and all the changes made in this new branch will stay only here
until it will be merged with another one. And also this new branch
wouldn't iclude the changes in the parent branch until the merge.

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always 
doing merges manually?
A: The pros of the automatic merging are that you do not need to
re-check and submit each and every change you made before. But the cons
are the same here - as far Git doesn't understand logic changes you
could get some duplicated functions/variables in resolving file that 
will lead to ununderstandable and unexpectable bugs and crashes.